
var 사이즈 = [85, 90, 95, 100, 105, 110]; //어떤 사이즈를 집어넣고 싶은지 일단 사이즈를 한 곳에 정리

$('#option1').on('change', function () {   // option1의 값이 바뀔때 마다 함수 실행
  if ($('#option1').val() == '셔츠') {     // 만약에 사용자가 선택한 값이 셔츠인 경우 
    $('#option2').html('');            // 템플릿 만들기 전에 option2안에 있는 HTML을 지워줘

    // ⭐ for 반복문으로 HTML 생성
    // for (var i = 0; i < 6; i++) {
    //   var 셔츠템플릿 = `<option>${사이즈[i]}</option>`;                    
    //   $('#option2').append(셔츠템플릿);
    
    // ⭐ forEach 반복문을 이용해서 다시 만들어보자 
    // forEach 반복문 = array에 있는 자료들을 하나씩 뽑아내고 싶을 경우 쓸 수 있는 쉬운 반복문
    // 🔻 어레이.forEach()로 반복하기
    사이즈.forEach(function (i) {      // forEach => 왼쪽 array 자료 갯수만큼 반복해주세요
      // 6번 반복해줌
      // i 값은 사이즈 안에있는 하나하나의 데이터
      // 즉, 저장된 데이터(여기서 i는 85, 90 ... 105, 110)
      var 셔츠템플릿 = `<option>${i}</option>`;                    
      $('#option2').append(셔츠템플릿);
    });
    
  }
  
})



// 반복문의 용도
// 1. 그냥 코드 반복
// 2. [Array], {Object} 안에 있는 자료 출력

// ⭐ 자바스크립트 역따옴표로 만든 문자자료형은 중간중간 변수 등을 집어넣고 싶다면 
//  ${} 기호를 이용해 집어넣을 수 있습니다.



// ⭐ Arrow Function을 알아보자 

// 참고로 자바스크립트에서 콜백함수를 사용할 때
// 콜백함수를 조금 더 예쁜 모양으로 사용가능합니다.

// var 사이즈 = [26,28,30,32,34,36];
// 사이즈.forEach(function(i){
//     console.log(i)
// });
// 🔻
// 사이즈.forEach((i) => {
//     console.log(i)
// });
// 🔺  function이라는 키워드 대신 => 라는 화살표를 이용가능합니다.
// 멋진 용어로 Arrow Function이라고 합니다.

// 다만 소괄호 오른쪽에 쓴다는 점이 조금 다르네요.
// ES6 문법이니 브라우저 호환성이 안좋을 순 있지만 영어가 줄어들어 훨씬 보기 좋습니다. 


// 특징은

// 1. 파라미터(구멍)가 하나면 소괄호를 생략가능합니다. 
// 2. 함수의 중괄호 내에 return 어쩌구~ 한줄밖에 없으면 {} 중괄호도 생략가능합니다.  
// 3. function 문법 내에선 this라는 키워드의 값이 새롭게 변합니다.
// 하지만 arrow function의 경우 그냥 함수 바깥에 있던 this를 그대로 사용합니다.

// - 그래서 function 내에서 this값을 쓰고 싶을 때 arrow function을 쓸지 말지를
// 잘 생각해보셔야합니다.